"""
M√≥dulo respons√°vel pela exibi√ß√£o e manipula√ß√£o visual do tabuleiro
"""

from utils.limpar_tela import limpar_tela

class Tabuleiro:
    """Classe respons√°vel pela exibi√ß√£o do tabuleiro do jogo"""
    
    def __init__(self):
        self.matriz = [[' ' for _ in range(3)] for _ in range(3)]
    
    def limpar(self):
        """Reinicia o tabuleiro com todas as posi√ß√µes vazias"""
        self.matriz = [[' ' for _ in range(3)] for _ in range(3)]
    
    def fazer_jogada(self, linha, coluna, jogador):
        """
        Faz uma jogada no tabuleiro
        
        Args:
            linha (int): Linha da jogada (0-2)
            coluna (int): Coluna da jogada (0-2)
            jogador (str): S√≠mbolo do jogador ('X' ou 'O')
            
        Returns:
            bool: True se a jogada foi v√°lida, False caso contr√°rio
        """
        if 0 <= linha <= 2 and 0 <= coluna <= 2 and self.matriz[linha][coluna] == ' ':
            self.matriz[linha][coluna] = jogador
            return True
        return False
    
    def posicao_vazia(self, linha, coluna):
        """
        Verifica se uma posi√ß√£o est√° vazia
        
        Args:
            linha (int): Linha a verificar
            coluna (int): Coluna a verificar
            
        Returns:
            bool: True se a posi√ß√£o est√° vazia, False caso contr√°rio
        """
        return self.matriz[linha][coluna] == ' '
    
    def obter_posicoes_vazias(self):
        """
        Retorna todas as posi√ß√µes vazias do tabuleiro
        
        Returns:
            list: Lista de tuplas (linha, coluna) das posi√ß√µes vazias
        """
        posicoes = []
        for i in range(3):
            for j in range(3):
                if self.matriz[i][j] == ' ':
                    posicoes.append((i, j))
        return posicoes
    
    def esta_cheio(self):
        """
        Verifica se o tabuleiro est√° completamente preenchido
        
        Returns:
            bool: True se n√£o h√° posi√ß√µes vazias, False caso contr√°rio
        """
        for linha in self.matriz:
            if ' ' in linha:
                return False
        return True
    
    def copiar_matriz(self):
        """
        Retorna uma c√≥pia da matriz do tabuleiro
        
        Returns:
            list: C√≥pia da matriz 3x3 do tabuleiro
        """
        return [linha[:] for linha in self.matriz]
    
    def exibir(self, modo_jogo, jogador_atual, mensagem=""):
        """
        Exibe o tabuleiro na tela com informa√ß√µes do jogo
        
        Args:
            modo_jogo (str): Modo atual do jogo
            jogador_atual (str): Jogador atual ('X' ou 'O')
            mensagem (str): Mensagem adicional para exibir
        """
        limpar_tela()

        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                üéÆ JOGO DA VELHA COM IA ü§ñ            ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

        modo_texto = {
            'humano': "üë• Dois Jogadores",
            'computador': "üë§ Humano (X) vs üé≤ Computador Random (O)",
            'ia': "üë§ Humano (X) vs ü§ñ IA Treinada (O)",
            'assistir': "üé≤ Computador Random (X) vs ü§ñ IA Treinada (O)",
            'treino': "üß† Modo: Treinamento da IA"
        }
        print(f"\n{modo_texto.get(modo_jogo, 'Modo: Desconhecido')}\n")

        # Cabe√ßalho do tabuleiro
        print("    0   1   2")
        print("  +---+---+---+")

        # Linhas do tabuleiro
        for i in range(3):
            linha = f"{i} |"
            for j in range(3):
                valor = self.matriz[i][j] if self.matriz[i][j] != ' ' else ' '
                linha += f" {valor} |"
            print(linha)
            print("  +---+---+---+")

        print("\nüìç Legenda: X = jogador 1, O = jogador 2 ou IA")

        if mensagem:
            print(f"\nüí¨ {mensagem}")

        print()
        
        # Informa√ß√µes espec√≠ficas por modo
        if modo_jogo in ['computador', 'ia'] and jogador_atual == 'O':
            tipo_oponente = "ü§ñ IA Treinada" if modo_jogo == 'ia' else "üé≤ Computador Random"
            print(f"üéØ Vez do {tipo_oponente} ({jogador_atual}) - Pensando...")
            print("‚è≥ Aguarde...")
        elif modo_jogo == 'assistir':
            jogador_nome = "üé≤ Computador Random" if jogador_atual == 'X' else "ü§ñ IA Treinada"
            print(f"üéØ Vez do {jogador_nome} ({jogador_atual}) - Pensando...")
            print("‚è≥ Pressione Ctrl+C para sair")
        elif modo_jogo != 'treino':
            print(f"üéØ Vez do jogador {jogador_atual}")
            print("üìù Digite: linha coluna (ex: 1 2) ou 'q' para sair")

        print("‚îÄ" * 56)
    
    def exibir_menu_principal(self):
        """Exibe o menu principal do jogo"""
        limpar_tela()
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                üéÆ JOGO DA VELHA COM IA ü§ñ             ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()
        print("üéØ Escolha o modo de jogo:")
        print()
        print("  1Ô∏è‚É£  - üë• Dois jogadores")
        print("  2Ô∏è‚É£  - üë§ Humano vs üé≤ Computador (aleat√≥rio)")
        print("  3Ô∏è‚É£  - üë§ Humano vs ü§ñ IA Treinada")
        print("  4Ô∏è‚É£  - üëÄ Assistir: üé≤ Computador Random vs ü§ñ IA")
        print("  5Ô∏è‚É£  - üß† Treinar a IA")
        print()
        print("‚îÄ" * 56)
    
    def exibir_tela_treinamento(self, episodio, total_episodios, epsilon, vitorias_x, vitorias_o, empates):
        """
        Exibe o progresso do treinamento
        
        Args:
            episodio (int): Epis√≥dio atual
            total_episodios (int): Total de epis√≥dios
            epsilon (float): Valor atual do epsilon
            vitorias_x (int): N√∫mero de vit√≥rias do X
            vitorias_o (int): N√∫mero de vit√≥rias do O
            empates (int): N√∫mero de empates
        """
        if episodio == 1:
            limpar_tela()
            print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            print("‚ïë                üß† TREINAMENTO DA IA ü§ñ                ‚ïë")
            print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
            print()
            print(f"üöÄ Iniciando treinamento com {total_episodios:,} epis√≥dios...")
            print("‚è≥ Isso pode levar alguns segundos...")
            print()
            print("üìä Progresso do treinamento:")
            print("‚îÄ" * 56)
        
        if episodio % 1000 == 0:
            progresso = episodio / total_episodios * 100
            barra = "‚ñà" * int(progresso / 2) + "‚ñë" * (50 - int(progresso / 2))
            
            print(f"üìà Epis√≥dio {episodio:,}/{total_episodios:,} [{barra}] {progresso:.1f}%")
            print(f"üéØ Epsilon: {epsilon:.3f}")
            print(f"üìä √öltimos 1000: ‚ùå{vitorias_x:3d} ‚≠ï{vitorias_o:3d} ü§ù{empates:3d}")
            print("‚îÄ" * 56)